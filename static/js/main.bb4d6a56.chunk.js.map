{"version":3,"sources":["Components/Logo/Logo.module.css","Components/Form/Form.module.css","Components/Conditions/Condtions.module.css","Components/Conditions/Conditions.js","Components/Form/Form.js","Components/Forecast/Forecast.js","Components/Logo/Logo.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Form","onSubmit","getForecast","TextInput","type","placeholder","maxLength","value","city","onChange","e","setCity","target","Radio","checked","unit","setUnit","Button","Forecast","useState","setError","setLoading","setResponseObj","uriEncodedCity","encodeURIComponent","preventDefault","length","fetch","process","then","response","json","Error","catch","err","console","log","message","Logo","sky","circle","cloud1","cloud2","cloud3","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb4d6a56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2mbT8\",\"sky\":\"Logo_sky__2Dx8k\",\"cloud1\":\"Logo_cloud1__1tR12\",\"cloud2\":\"Logo_cloud2__2CNCy\",\"cloud3\":\"Logo_cloud3__223NW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Form_TextInput__yfrEC\",\"Radio\":\"Form_Radio__34wpv\",\"Button\":\"Form_Button__Zkrc7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Condtions_Wrapper__26ZzO\",\"Small\":\"Condtions_Small__2_UAi\",\"Loader\":\"Condtions_Loader__2z3Sg\",\"spin\":\"Condtions_spin__3hKxp\"};","import classes from './Condtions.module.css';\n\nconst Conditions = (props) => {\n    return (\n        <div className={classes.Wrapper}>\n            {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n            {props.loading && <div className={classes.Loader}>Loading...</div>}\n            {props.responseObj.cod === 200 ?\n                <div >\n                    <p>\n                        <strong>{props.responseObj.name}</strong>\n                    </p>\n                    <p>\n                        It is currently &nbsp;\n                     {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}. \n                    </p>\n                </div>    \n            :null\n        }\n        </div>\n    );\n}\n \nexport default Conditions;","import classes from './Form.module.css';\n\nconst Form = (props) => {\n    return (\n        <form onSubmit={props.getForecast}>\n                <input \n                    className={classes.TextInput}\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={props.city}\n                    onChange={(e) => props.setCity(e.target.value)}\n                />\n                <label className={classes.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={props.unit === 'imperial'}\n                        value=\"imperial\"\n                        onChange={(e) => \n                         props.setUnit(e.target.value)\n                        }\n                        />\n                        Fahrenheit\n                </label>\n                <label className={classes.Radio}>\n                    <input \n                        type=\"radio\"\n                        name=\"units\"\n                        checked={props.unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => \n                            props.setUnit(e.target.value)\n                        }\n                    />\n                    Celcius\n                </label>\n                <button type=\"submit\" className={classes.Button}>Get Forecast</button>\n            </form>\n    );\n}\n \nexport default Form;","import {useState} from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport Form from '../Form/Form';\n\nconst Forecast = () => {\n    \n    let [city, setCity] = useState('');\n    let [unit, setUnit] = useState('imperial');\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    let [responseObj, setResponseObj] = useState({}); \n    const uriEncodedCity = encodeURIComponent(city);\n\n\n    function getForecast(e) {\n        e.preventDefault();\n        if (city.length === 0) {\n            return setError(true);\n        }\n        //Clear state in preparation for new data\n        setError(false);\n        setResponseObj({});\n        setLoading(true)\n\n\n        fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\n            }\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.cod !==200) {\n                throw new Error() \n            }\n            setResponseObj(response);\n            setLoading(false);\n        })\n        .catch(err => {\n            setError(true);\n            setLoading(false);\n            console.log(err.message);\n        });\n    }\n\n    return (\n        <div>\n            <h2>Find Current Weather Conditions</h2>\n            <Form \n            getForecast={getForecast}\n            setCity={setCity}\n            setUnit={setUnit}\n            city={city}\n            unit={unit}\n            />\n             <Conditions\n                responseObj={responseObj}\n                error={error}\n                loading={loading}\n             />\n        </div>\n    );\n}\n \nexport default Forecast;","import classes from './Logo.module.css';\n\nconst Logo = () => {\n    return (\n        <div className={classes.sky}>\n            <div className={classes.circle}></div>\n            <div className={classes.cloud1}></div>\n            <div className={classes.cloud2}></div>\n            <div className={classes.cloud3}></div>\n        </div>\n    );\n}\n \nexport default Logo;","import './App.css';\nimport Forecast from './Components/Forecast/Forecast';\nimport Logo from './Components/Logo/Logo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo/>\n        <h1>React Weather App</h1>\n      </header>\n      <main>\n        <Forecast/>\n      </main>\n      <footer>\n        Page Created By HQ \n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}